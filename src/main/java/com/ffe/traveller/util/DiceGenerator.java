package com.ffe.traveller.util;

//
//  DiceGenerator.java
//  CthuluCharGen
//
//  Created by Mark Knights on 29/04/07.
//  Copyright 2007 One Stage Before. All rights reserved.
//

import javax.validation.constraints.Null;
import java.util.Random;

public class DiceGenerator {

    static final int sides = 6;


    /**
     * @param generator
     * @param numDice
     * @param modifier
     * @return int[]
     * <p/>
     * Used to create a bulk number of similar dice rolls at once that
     * are modified by adding the parameter modifier. Method returns an
     * array of length numRolls which is made up of totals of the
     * numDice of numSides rolls generated by a Random generator.
     */
    static public int rollDiceWithModifier(@Null Random generator, int numDice, int modifier) {
        int result = 0;
        if (generator == null) {
            generator = new Random();
        }

        for (int i = 0; i < numDice; i++) {
            result = result
                    + (Math.abs(generator.nextInt()) % sides + 1);
        }
        result += modifier;

        return result;
    }

    /**
     * @param numDice
     * @param modifier
     * @return int[]
     * <p/>
     * Used to create a bulk number of similar dice rolls at once that
     * are modified by adding the parameter modifier. Method returns an
     * array of length numRolls which is made up of totals of the
     * numDice of numSides rolls generated by a Random generator.
     */
    static public int rollDiceWithModifier(int numDice, int modifier) {
        Random generator = new Random();

        return rollDiceWithModifier(generator, numDice, modifier);
    }

    /**
     * @param numRolls
     * @param numDice
     * @param modifier
     * @return int[]
     * <p/>
     * Used to create a bulk number of similar dice rolls at once that
     * are modified by adding the parameter modifier. Method returns an
     * array of length numRolls which is made up of totals of the
     * numDice of numSides rolls generated by a Random generator.
     */
    static public int[] rollDiceWithModifierArray(@Null Random generator, int numRolls, int numDice, int modifier) {
        int[] resultArray = new int[numRolls];
        int result;
        if (generator == null) {
            generator = new Random();
        }
        for (int j = 0; j < numRolls; j++) {
            result = 0;
            for (int i = 0; i < numDice; i++) {
                result = result
                        + (Math.abs(generator.nextInt()) % sides + 1);
            }
            resultArray[j] = result + modifier;
        }

        return resultArray;
    }

    /**
     * @param numDice
     * @return int
     * <p/>
     * Returns the number of dice rolled is the same as numDice.
     */
    static public int rollDice(int numDice) {
        return rollDiceWithModifier(null, numDice, 0);
    }

    /**
     * @param generator
     * @param numDice
     * @return int
     * <p/>
     * Returns the number of dice rolled is the same as numDice.
     */
    static public int rollDice(Random generator, int numDice) {
        return rollDiceWithModifier(null, numDice, 0);
    }

    /**
     * @return The result of 2d6 roll
     */
    static public int roll() {
        return rollDice(2);
    }

    /**
     * @param generator
     * @return The result of 2d6 roll
     */
    static public int roll(Random generator) {
        return rollDice(generator, 2);
    }

    /**
     * @param numDice
     * @param modifier
     * @param lower
     * @param upper
     * @return
     */
    static public int rollDiceInRange(int numDice, int modifier, int lower, int upper) {

        int result = rollDiceWithModifier(null, numDice, modifier);

        while (result < lower || result > upper) {
            result = rollDiceWithModifier(null, numDice, modifier);
        }

        return result;
    }

    /**
     * @param generator
     * @param numDice
     * @param modifier
     * @param lower
     * @param upper
     * @return
     */
    static public int rollDiceInRange(Random generator, int numDice, int modifier, int lower, int upper) {
        int result = rollDiceWithModifier(generator, numDice, modifier);

        while (result < lower || result > upper) {
            result = rollDiceWithModifier(generator, numDice, modifier);
        }

        return result;
    }

}
